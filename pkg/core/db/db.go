// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createAccountStmt, err = db.PrepareContext(ctx, createAccount); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAccount: %w", err)
	}
	if q.createPostingStmt, err = db.PrepareContext(ctx, createPosting); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePosting: %w", err)
	}
	if q.createTransactionStmt, err = db.PrepareContext(ctx, createTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTransaction: %w", err)
	}
	if q.deleteAccountStmt, err = db.PrepareContext(ctx, deleteAccount); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAccount: %w", err)
	}
	if q.deletePostingStmt, err = db.PrepareContext(ctx, deletePosting); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePosting: %w", err)
	}
	if q.deleteTransactionStmt, err = db.PrepareContext(ctx, deleteTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTransaction: %w", err)
	}
	if q.getAccountsStmt, err = db.PrepareContext(ctx, getAccounts); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccounts: %w", err)
	}
	if q.getPostingsStmt, err = db.PrepareContext(ctx, getPostings); err != nil {
		return nil, fmt.Errorf("error preparing query GetPostings: %w", err)
	}
	if q.getTransactionsStmt, err = db.PrepareContext(ctx, getTransactions); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransactions: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createAccountStmt != nil {
		if cerr := q.createAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAccountStmt: %w", cerr)
		}
	}
	if q.createPostingStmt != nil {
		if cerr := q.createPostingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPostingStmt: %w", cerr)
		}
	}
	if q.createTransactionStmt != nil {
		if cerr := q.createTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTransactionStmt: %w", cerr)
		}
	}
	if q.deleteAccountStmt != nil {
		if cerr := q.deleteAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAccountStmt: %w", cerr)
		}
	}
	if q.deletePostingStmt != nil {
		if cerr := q.deletePostingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePostingStmt: %w", cerr)
		}
	}
	if q.deleteTransactionStmt != nil {
		if cerr := q.deleteTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTransactionStmt: %w", cerr)
		}
	}
	if q.getAccountsStmt != nil {
		if cerr := q.getAccountsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountsStmt: %w", cerr)
		}
	}
	if q.getPostingsStmt != nil {
		if cerr := q.getPostingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPostingsStmt: %w", cerr)
		}
	}
	if q.getTransactionsStmt != nil {
		if cerr := q.getTransactionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransactionsStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                    DBTX
	tx                    *sql.Tx
	createAccountStmt     *sql.Stmt
	createPostingStmt     *sql.Stmt
	createTransactionStmt *sql.Stmt
	deleteAccountStmt     *sql.Stmt
	deletePostingStmt     *sql.Stmt
	deleteTransactionStmt *sql.Stmt
	getAccountsStmt       *sql.Stmt
	getPostingsStmt       *sql.Stmt
	getTransactionsStmt   *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                    tx,
		tx:                    tx,
		createAccountStmt:     q.createAccountStmt,
		createPostingStmt:     q.createPostingStmt,
		createTransactionStmt: q.createTransactionStmt,
		deleteAccountStmt:     q.deleteAccountStmt,
		deletePostingStmt:     q.deletePostingStmt,
		deleteTransactionStmt: q.deleteTransactionStmt,
		getAccountsStmt:       q.getAccountsStmt,
		getPostingsStmt:       q.getPostingsStmt,
		getTransactionsStmt:   q.getTransactionsStmt,
	}
}

// Code generated by sqlc. DO NOT EDIT.
// source: ledgers.sql

package db

import (
	"context"

	"github.com/gofrs/uuid"
)

const createLedger = `-- name: CreateLedger :one
INSERT INTO ledgers (
  user_id,
  data,
  dk
) VALUES (
  $1,
  $2,
  $3
) RETURNING id, user_id, data, dk
`

type CreateLedgerParams struct {
	UserID uuid.UUID `json:"user_id"`
	Data   []byte    `json:"data"`
	Dk     []byte    `json:"dk"`
}

func (q *Queries) CreateLedger(ctx context.Context, arg CreateLedgerParams) (Ledger, error) {
	row := q.queryRow(ctx, q.createLedgerStmt, createLedger, arg.UserID, arg.Data, arg.Dk)
	var i Ledger
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Data,
		&i.Dk,
	)
	return i, err
}

const getLedger = `-- name: GetLedger :one
SELECT
  id, user_id, data, dk
FROM
  ledgers
WHERE
  id = $1
`

func (q *Queries) GetLedger(ctx context.Context, id uuid.UUID) (Ledger, error) {
	row := q.queryRow(ctx, q.getLedgerStmt, getLedger, id)
	var i Ledger
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Data,
		&i.Dk,
	)
	return i, err
}

const updateLedger = `-- name: UpdateLedger :one
UPDATE ledgers SET
  data = $1,
  dk = $2
WHERE
  id = $3
RETURNING id, user_id, data, dk
`

type UpdateLedgerParams struct {
	Data []byte    `json:"data"`
	Dk   []byte    `json:"dk"`
	ID   uuid.UUID `json:"id"`
}

func (q *Queries) UpdateLedger(ctx context.Context, arg UpdateLedgerParams) (Ledger, error) {
	row := q.queryRow(ctx, q.updateLedgerStmt, updateLedger, arg.Data, arg.Dk, arg.ID)
	var i Ledger
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Data,
		&i.Dk,
	)
	return i, err
}

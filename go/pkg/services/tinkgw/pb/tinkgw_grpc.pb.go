// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TinkGWClient is the client API for TinkGW service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TinkGWClient interface {
	GetLink(ctx context.Context, in *GetLinkReq, opts ...grpc.CallOption) (*Link, error)
	GetToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Token, error)
}

type tinkGWClient struct {
	cc grpc.ClientConnInterface
}

func NewTinkGWClient(cc grpc.ClientConnInterface) TinkGWClient {
	return &tinkGWClient{cc}
}

func (c *tinkGWClient) GetLink(ctx context.Context, in *GetLinkReq, opts ...grpc.CallOption) (*Link, error) {
	out := new(Link)
	err := c.cc.Invoke(ctx, "/pb.TinkGW/GetLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinkGWClient) GetToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/pb.TinkGW/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TinkGWServer is the server API for TinkGW service.
// All implementations must embed UnimplementedTinkGWServer
// for forward compatibility
type TinkGWServer interface {
	GetLink(context.Context, *GetLinkReq) (*Link, error)
	GetToken(context.Context, *Token) (*Token, error)
	mustEmbedUnimplementedTinkGWServer()
}

// UnimplementedTinkGWServer must be embedded to have forward compatible implementations.
type UnimplementedTinkGWServer struct {
}

func (UnimplementedTinkGWServer) GetLink(context.Context, *GetLinkReq) (*Link, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLink not implemented")
}
func (UnimplementedTinkGWServer) GetToken(context.Context, *Token) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedTinkGWServer) mustEmbedUnimplementedTinkGWServer() {}

// UnsafeTinkGWServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TinkGWServer will
// result in compilation errors.
type UnsafeTinkGWServer interface {
	mustEmbedUnimplementedTinkGWServer()
}

func RegisterTinkGWServer(s grpc.ServiceRegistrar, srv TinkGWServer) {
	s.RegisterService(&TinkGW_ServiceDesc, srv)
}

func _TinkGW_GetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinkGWServer).GetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TinkGW/GetLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinkGWServer).GetLink(ctx, req.(*GetLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinkGW_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinkGWServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TinkGW/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinkGWServer).GetToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

// TinkGW_ServiceDesc is the grpc.ServiceDesc for TinkGW service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TinkGW_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TinkGW",
	HandlerType: (*TinkGWServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLink",
			Handler:    _TinkGW_GetLink_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _TinkGW_GetToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tinkgw.proto",
}

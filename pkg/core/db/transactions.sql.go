// Code generated by sqlc. DO NOT EDIT.
// source: transactions.sql

package db

import (
	"context"
	"time"

	"github.com/gofrs/uuid"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
  date,
  entity,
  reference,
  hash
) Values (
  $1,
  $2,
  $3,
  $4
) RETURNING id, date, entity, reference, hash
`

type CreateTransactionParams struct {
	Date      time.Time `json:"date"`
	Entity    string    `json:"entity"`
	Reference string    `json:"reference"`
	Hash      string    `json:"hash"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.queryRow(ctx, q.createTransactionStmt, createTransaction,
		arg.Date,
		arg.Entity,
		arg.Reference,
		arg.Hash,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Entity,
		&i.Reference,
		&i.Hash,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM
  transactions
WHERE id = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteTransactionStmt, deleteTransaction, id)
	return err
}

const getTransactions = `-- name: GetTransactions :many
SELECT
  transactions.id,
  transactions.date,
  transactions.entity,
  transactions.reference,
  transactions.hash,
  postings.id AS posting_id,
  postings.account,
  postings.units,
  postings.cost,
  postings.price,
  accounts.name
FROM
  transactions
INNER JOIN
  postings
ON
  transactions.id = postings.transaction
INNER JOIN
  accounts
ON
  accounts.id = postings.account
AND
  accounts.name ~ $1
INNER JOIN
  accounts_users
ON
  accounts_users.account = accounts.id
AND
  accounts_users.user = $2
WHERE
  date BETWEEN $3 AND $4
`

type GetTransactionsParams struct {
	AccountName string    `json:"account_name"`
	UserID      uuid.UUID `json:"user_id"`
	FromDate    time.Time `json:"from_date"`
	ToDate      time.Time `json:"to_date"`
}

type GetTransactionsRow struct {
	ID        uuid.UUID `json:"id"`
	Date      time.Time `json:"date"`
	Entity    string    `json:"entity"`
	Reference string    `json:"reference"`
	Hash      string    `json:"hash"`
	PostingID uuid.UUID `json:"posting_id"`
	Account   uuid.UUID `json:"account"`
	UnitsStr  string    `json:"units"`
	CostStr   string    `json:"cost"`
	PriceStr  string    `json:"price"`
	Name      string    `json:"name"`
}

func (q *Queries) GetTransactions(ctx context.Context, arg GetTransactionsParams) ([]GetTransactionsRow, error) {
	rows, err := q.query(ctx, q.getTransactionsStmt, getTransactions,
		arg.AccountName,
		arg.UserID,
		arg.FromDate,
		arg.ToDate,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTransactionsRow
	for rows.Next() {
		var i GetTransactionsRow
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Entity,
			&i.Reference,
			&i.Hash,
			&i.PostingID,
			&i.Account,
			&i.UnitsStr,
			&i.CostStr,
			&i.PriceStr,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

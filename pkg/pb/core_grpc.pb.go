// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoreClient is the client API for Core service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreClient interface {
	CreateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error)
	GetAccounts(ctx context.Context, in *AccountsQuery, opts ...grpc.CallOption) (*Accounts, error)
	CreateTransactions(ctx context.Context, opts ...grpc.CallOption) (Core_CreateTransactionsClient, error)
	GetTransactions(ctx context.Context, in *TransactionsQuery, opts ...grpc.CallOption) (*Transactions, error)
}

type coreClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreClient(cc grpc.ClientConnInterface) CoreClient {
	return &coreClient{cc}
}

func (c *coreClient) CreateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/pb.Core/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetAccounts(ctx context.Context, in *AccountsQuery, opts ...grpc.CallOption) (*Accounts, error) {
	out := new(Accounts)
	err := c.cc.Invoke(ctx, "/pb.Core/GetAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CreateTransactions(ctx context.Context, opts ...grpc.CallOption) (Core_CreateTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Core_ServiceDesc.Streams[0], "/pb.Core/CreateTransactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreCreateTransactionsClient{stream}
	return x, nil
}

type Core_CreateTransactionsClient interface {
	Send(*Transaction) error
	CloseAndRecv() (*Transactions, error)
	grpc.ClientStream
}

type coreCreateTransactionsClient struct {
	grpc.ClientStream
}

func (x *coreCreateTransactionsClient) Send(m *Transaction) error {
	return x.ClientStream.SendMsg(m)
}

func (x *coreCreateTransactionsClient) CloseAndRecv() (*Transactions, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Transactions)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreClient) GetTransactions(ctx context.Context, in *TransactionsQuery, opts ...grpc.CallOption) (*Transactions, error) {
	out := new(Transactions)
	err := c.cc.Invoke(ctx, "/pb.Core/GetTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreServer is the server API for Core service.
// All implementations must embed UnimplementedCoreServer
// for forward compatibility
type CoreServer interface {
	CreateAccount(context.Context, *Account) (*Account, error)
	GetAccounts(context.Context, *AccountsQuery) (*Accounts, error)
	CreateTransactions(Core_CreateTransactionsServer) error
	GetTransactions(context.Context, *TransactionsQuery) (*Transactions, error)
	mustEmbedUnimplementedCoreServer()
}

// UnimplementedCoreServer must be embedded to have forward compatible implementations.
type UnimplementedCoreServer struct {
}

func (UnimplementedCoreServer) CreateAccount(context.Context, *Account) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedCoreServer) GetAccounts(context.Context, *AccountsQuery) (*Accounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccounts not implemented")
}
func (UnimplementedCoreServer) CreateTransactions(Core_CreateTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateTransactions not implemented")
}
func (UnimplementedCoreServer) GetTransactions(context.Context, *TransactionsQuery) (*Transactions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedCoreServer) mustEmbedUnimplementedCoreServer() {}

// UnsafeCoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreServer will
// result in compilation errors.
type UnsafeCoreServer interface {
	mustEmbedUnimplementedCoreServer()
}

func RegisterCoreServer(s grpc.ServiceRegistrar, srv CoreServer) {
	s.RegisterService(&Core_ServiceDesc, srv)
}

func _Core_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Core/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CreateAccount(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Core/GetAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetAccounts(ctx, req.(*AccountsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CreateTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CoreServer).CreateTransactions(&coreCreateTransactionsServer{stream})
}

type Core_CreateTransactionsServer interface {
	SendAndClose(*Transactions) error
	Recv() (*Transaction, error)
	grpc.ServerStream
}

type coreCreateTransactionsServer struct {
	grpc.ServerStream
}

func (x *coreCreateTransactionsServer) SendAndClose(m *Transactions) error {
	return x.ServerStream.SendMsg(m)
}

func (x *coreCreateTransactionsServer) Recv() (*Transaction, error) {
	m := new(Transaction)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Core_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Core/GetTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetTransactions(ctx, req.(*TransactionsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// Core_ServiceDesc is the grpc.ServiceDesc for Core service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Core_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Core",
	HandlerType: (*CoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _Core_CreateAccount_Handler,
		},
		{
			MethodName: "GetAccounts",
			Handler:    _Core_GetAccounts_Handler,
		},
		{
			MethodName: "GetTransactions",
			Handler:    _Core_GetTransactions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateTransactions",
			Handler:       _Core_CreateTransactions_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/core.proto",
}

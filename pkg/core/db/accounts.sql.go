// Code generated by sqlc. DO NOT EDIT.
// source: accounts.sql

package db

import (
	"context"

	"github.com/gofrs/uuid"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
  name
) VALUES (
  $1
) RETURNING id, name
`

func (q *Queries) CreateAccount(ctx context.Context, name string) (Account, error) {
	row := q.queryRow(ctx, q.createAccountStmt, createAccount, name)
	var i Account
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM
  accounts
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteAccountStmt, deleteAccount, id)
	return err
}

const getAccounts = `-- name: GetAccounts :many
SELECT
  accounts.id,
  accounts.name
FROM
  accounts
JOIN
  accounts_users
ON
  accounts_users.account = accounts.id
AND
  accounts_users.user = $1
WHERE
  accounts.name ~ $2
`

type GetAccountsParams struct {
	User uuid.UUID `json:"user"`
	Name string    `json:"name"`
}

func (q *Queries) GetAccounts(ctx context.Context, arg GetAccountsParams) ([]Account, error) {
	rows, err := q.query(ctx, q.getAccountsStmt, getAccounts, arg.User, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const linkAccount = `-- name: LinkAccount :one
INSERT INTO accounts_users (
  account,
  "user"
) VALUES (
  $1,
  $2
) RETURNING id, account, "user"
`

type LinkAccountParams struct {
	Account uuid.UUID `json:"account"`
	User    uuid.UUID `json:"user"`
}

func (q *Queries) LinkAccount(ctx context.Context, arg LinkAccountParams) (AccountsUser, error) {
	row := q.queryRow(ctx, q.linkAccountStmt, linkAccount, arg.Account, arg.User)
	var i AccountsUser
	err := row.Scan(&i.ID, &i.Account, &i.User)
	return i, err
}

const ownsAccount = `-- name: OwnsAccount :one
SELECT
  COUNT(1)
FROM
  accounts_users
WHERE
  account = $1
AND
  "user" = $2
`

type OwnsAccountParams struct {
	Account uuid.UUID `json:"account"`
	User    uuid.UUID `json:"user"`
}

func (q *Queries) OwnsAccount(ctx context.Context, arg OwnsAccountParams) (int64, error) {
	row := q.queryRow(ctx, q.ownsAccountStmt, ownsAccount, arg.Account, arg.User)
	var count int64
	err := row.Scan(&count)
	return count, err
}

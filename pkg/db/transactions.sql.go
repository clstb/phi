// Code generated by sqlc. DO NOT EDIT.
// source: transactions.sql

package db

import (
	"context"
	"time"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
  date,
  entity,
  reference,
  hash
) Values (
  $1,
  $2,
  $3,
  $4
) RETURNING id, date, entity, reference, hash
`

type CreateTransactionParams struct {
	Date      time.Time `json:"date"`
	Entity    string    `json:"entity"`
	Reference string    `json:"reference"`
	Hash      string    `json:"hash"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.queryRow(ctx, q.createTransactionStmt, createTransaction,
		arg.Date,
		arg.Entity,
		arg.Reference,
		arg.Hash,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Entity,
		&i.Reference,
		&i.Hash,
	)
	return i, err
}

const getTransactions = `-- name: GetTransactions :many
SELECT DISTINCT
  transactions.id,
  date,
  entity,
  reference,
  hash
FROM
  transactions
JOIN
  postings
ON
  transactions.id = postings.transaction
JOIN
  accounts
ON
  accounts.id = postings.account
AND
  accounts.name ~ $1::text
WHERE
  date BETWEEN $2::date AND $3::date
`

type GetTransactionsParams struct {
	AccountName string    `json:"account_name"`
	FromDate    time.Time `json:"from_date"`
	ToDate      time.Time `json:"to_date"`
}

func (q *Queries) GetTransactions(ctx context.Context, arg GetTransactionsParams) ([]Transaction, error) {
	rows, err := q.query(ctx, q.getTransactionsStmt, getTransactions, arg.AccountName, arg.FromDate, arg.ToDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Entity,
			&i.Reference,
			&i.Hash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
